name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: mydb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://user:password@localhost:5432/mydb

    steps:
      # Stage 1: Build & Install
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      # Stage 2: Lint / Security Scan
      - name: Lint backend
        run: |
          cd backend
          npm run lint || echo "Lint warnings found"

      - name: Security audit
        run: |
          cd backend
          npm audit --audit-level=moderate || echo "Security issues found"

      # Stage 3: Test (with DB)
      - name: Run backend tests
        run: |
          cd backend
          npx prisma migrate deploy
          npm test

      # Stage 4: Build Docker Images
      - name: Login to DockerHub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build backend Docker image
        run: docker build -t your-dockerhub-username/backend:latest ./backend

      - name: Build frontend Docker image
        run: docker build -t your-dockerhub-username/frontend:latest ./frontend

      # Stage 5: Deploy (only on main)
      - name: Push Docker images
        if: github.ref == 'refs/heads/main'
        run: |
          docker push your-dockerhub-username/backend:latest
          docker push your-dockerhub-username/frontend:latest

      - name: Deploy to server (example)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Deploying containers to production server..."
          # Example: ssh user@your-server "docker pull your-dockerhub-username/backend:latest && docker compose up -d"
